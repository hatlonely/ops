apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Release.Namespace }}
  name: {{ .Values.name }}
  labels:
    app: {{ .Values.name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.name }}
    spec:
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      affinity:
        {{- if .Values.nodeAffinity.enable }}
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: {{ .Values.nodeAffinity.key }}
                    operator: In
                    values:
                      - {{ .Values.nodeAffinity.val }}
        {{- end}}
        {{- if .Values.podAntiAffinity.enable }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - {{ .Values.name }}
              topologyKey: kubernetes.io/hostname
        {{- end}}
      {{- if .Values.tolerations.enable }}
      tolerations:
        - key: {{ .Values.tolerations.key }}
          operator: "Equal"
          value: {{ .Values.tolerations.val }}
          effect: "NoExecute"
      {{- end}}
      containers:
        - name: {{ .Values.name }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          startupProbe:
            tcpSocket:
              port: {{ .Values.container.port }}
            initialDelaySeconds: 3
            failureThreshold: 10
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /ping
              port: {{ .Values.container.port }}
            failureThreshold: 10
            periodSeconds: 3
          livenessProbe:
            httpGet:
              path: /ping
              port: {{ .Values.container.port }}
            failureThreshold: 3
            periodSeconds: 3
          ports:
            - containerPort: {{ .Values.container.port }}
          volumeMounts:
            - name: {{ .Values.name }}
              {{- if not .Values.container.configMountPath }}
              mountPath: /work/{{ .Values.name }}/config
              {{- else }}
              mountPath: {{ .Values.container.configMountPath }}
              {{- end }}
          {{- if .Values.container.runAsRoot }}
          securityContext:
            privileged: true
            allowPrivilegeEscalation: true
            runAsUser: 0
          {{- end}}
      {{- if .Values.container.runAsRoot }}
      securityContext:
        runAsUser: 0
      {{- end}}
      volumes:
        - name: {{.Values.name}}
          projected:
            sources:
            - configMap:
                name: {{.Values.name}}
                items:
                  {{ range $key, $val := .Values.config }}
                  - key: {{ $key }}
                    path: {{ $key }}
                  {{ end }}
